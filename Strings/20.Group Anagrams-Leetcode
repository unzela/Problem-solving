// Given an array of strings strs, group the anagrams together. You can return
// the answer in any order. An Anagram is a word or phrase formed by rearranging
// the letters of a different word or phrase, typically using all the original
// letters exactly once

// TC - O(N klogk) , klogk for sorting
// SC - O(NK), where N= strs.length() and K is length of largest string
#include <algorithm>
#include <iostream>
#include <map>
#include <vector>
using namespace std;

vector<vector<string>> groupAnagrams(vector<string> &strs) {
  map<string, vector<string>> mp;

  for (auto str : strs) {
    string s = str;
    sort(s.begin(), s.end());
    mp[s].push_back(str);
  }

  vector<vector<string>> ans;
  for (auto it = mp.begin(); it != mp.end(); it++) {
    ans.push_back(it->second);
  }
  return ans;
}

// Method 2 - Without sorting
// TC - O(NK)
//  SC - O(NK),

std::array<int, 256> hashMethod(string s) {
  std::array<int, 256> hash = {0};
  for (int i = 0; i < s.size(); i++) {
    hash[s[i]]++;
  }
  return hash;
}
vector<vector<string>> groupAnagrams1(vector<string> &strs) {
  map<std::array<int, 256>, vector<string>> mp;

  for (auto str : strs) {
    mp[hashMethod(str)].push_back(str);
  }

  vector<vector<string>> ans;
  for (auto it = mp.begin(); it != mp.end(); it++) {
    ans.push_back(it->second);
  }

  return ans;
}

int main() {
  vector<string> str = {"eat", "tea", "tan", "ate", "nat", "bat"};
  vector<vector<string>> result;

  result = groupAnagrams(str);
  // result = groupAnagrams1(str);

  cout << "Anagram groups:\n";
  for (const auto &i : result) {
    cout << "[";
    for (const auto &j : i) {
      cout << "\"" << j << "\" ";
    }
    cout << "]";
  }

  return 0;
}